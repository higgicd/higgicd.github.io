{
  "hash": "c2c3cd460a4f242a85f07bf4674c6efd",
  "result": {
    "markdown": "---\ntitle: \"Accelerating R\"\ndate: \"2023-07-21\"\ncategories: [code, analysis]\nimage: \"accelerating_r.jpg\"\n---\n\n\nOne of my favourite types of data to work with is real estate transactions. There is always something interesting to be learned from using hedonic models to tease out or quantify the implicit preferences of homebuyers (and renters) with respect to the old adage of \"location, location, location!\".\n\nSuch data tend to exhibit strong spatial autocorrelation and its associated ills. In response, I often turn to spatial econometric models that take spatial relationships among observations into account. R has a great ecosystem of packages for spatial econometrics, including the {spatialreg} package that I use often.\n\nHowever, running these models with many observations can be a *slow* process in R.\n\nThis is due to the computational costs associated with the manipulation of (potentially very large) spatial weights matrices. When using R's default math libraries, this can lead to models taking hours or even days to run. Moreover, there isn't much benefit to just getting better computer hardware: open up task manager on Windows or Activity Monitor on the Mac and you will see that R is only using one CPU core.\n\n## Accelerating R\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![Moar fasteR!](./accelerating_r.jpg){#fig-banner fig-align='center' width=452}\n:::\n:::\n\n\nUnder the hood, R uses two libraries for performing common mathematical operations: Basic Linear Algebra Subprograms (BLAS) and LAPACK (Linear Algebra Package). R ships with \"reference\" versions of BLAS and LAPACK that will return identical results across any installation of R, but are otherwise un-optimized (see [Eddelbuettel, 2016](https://cran.irsn.fr/web/packages/gcbd/vignettes/gcbd.pdf)).\n\nThankfully, there are several solutions out there for replacing R's reference libraries with more optimized ones that can lead to dramatic reductions in computational time. Since I use both Windows (Intel processors) and macOS (Intel and M-series processors) in my work, below you can find instructions for speeding up R in those two environments. AFAIK Linux users and those with AMD processors can utilize [OpenBLAS](https://www.openblas.net) to acheve the same results, but I don't have any experience in linking these libraries with R.\n\n::: callout-warning\nThese solutions require some knowledge of the file system and administrator privileges (Windows) and the Terminal (macOS). Like R itself, I offer no warranty or support of any kind for these changes! Indeed, customizing your R install might (and has in the past - see below) broken some R packages. Moreover, and as the R team [cautions](https://cran.r-project.org/bin/windows/base/rw-FAQ.html#Can-I-use-a-fast-BLAS_003f), \"Note that fast BLAS implementations may give different (and often slightly less accurate) results than the reference BLAS included in R\". It is pretty easy to revert these changes if you need to, but certainly stop here if you aren't comfortable with the risk. \n:::\n\n### Windows and Intel\n\nMy initial search for ways to speed up R led to me adopting of Microsoft's R Open, which, by default, used Intel's Math Kernel Library (MKL). The MKL uses versions of the BLAS and LAPACK libraries that are optimized for fast multithreaded performance on Intel's processors. Sure enough, this led to a dramatic reduction in computational time associated with running spatial econometric models. However, Microsoft discontinued the R Open project with the last release using R 4.0.2 in 2020.\n\nAs I further scoured the web for solutions, I came across this [stackoverflow thread](https://stackoverflow.com/questions/38090206/linking-intels-math-kernel-library-mkl-to-r-on-windows), which had details for how to manually link Intel's MKL with more recent versions of R. The write up is a bit complex, with some more recent working solutions now found within comments to the original answers in the thread. So here is a more streamlined version.\n\nFirst, you will need an install of R on your PC. At the time of writing, the current version is 4.3.1, so my file paths below will use that example. Second, download and install Intel's MKL, which is now part of their larger oneAPI product. I used the online installer for Windows found [here](https://www.intel.com/content/www/us/en/developer/articles/tool/oneapi-standalone-components.html#onemkl). At the time of writing, the oneMKL version was 2023.2.0. With these two software packages installed, now we have to do some manual steps (accepting the administrator rights prompts along the way):\n\n1.  copy all the files inside the `C:\\Program Files (x86)\\Intel\\oneAPI\\mkl\\2023.2.0\\redist\\intel64` folder and paste them inside `C:\\Program Files\\R\\R-4.3.1\\bin\\x64`\n2.  copy all the files inside the `C:\\Program Files (x86)\\Intel\\oneAPI\\compiler\\2023.2.0\\windows\\redist\\intel64_win\\compiler` folder and paste them inside `C:\\Program Files\\R\\R-4.3.1\\bin\\x64`\n3.  rename the existing `Rblas.dll` to something like `Rblas_ref.dll`\n4.  rename the existing `Rlapack.dll` to something like `Rlapack_ref.dll`\n5.  make two copies of `mkl_rt.2.dll`\n6.  rename one of the copies `Rblas.dll`\n7.  rename the other copy `Rlapack.dll`\n\nLarge math operations should now use all of your CPU's logical cores.\n\n#### Issues and Reversion\n\nThe one issue I have encountered in the past with linking the MKL to R is that the {igraph} package (and those depending on it) stopped working. According to a [recent answer](https://stackoverflow.com/a/76221553) on the original stackoverflow thread that inspired this, the issue has recently been addressed.\n\nTo undo these customizations, you would have to either rename (or delete) the two MKL files we renamed to be `Rblas.dll` and `Rlapack.dll` and substitute the original reference files back in by renaming them to their original names.\n\n### macOS\n\nAccelerating R on a (newer) Mac is more straightforward, and instructions for doing so are actually contained within the official [R for macOS FAQ](https://cran.r-project.org/bin/macosx/RMacOSX-FAQ.html#Which-BLAS-is-used-and-how-can-it-be-changed_003f). R for macOS ships with vecLib, which is part of Apple's Accelerate framework of optimizations for Apple hardware. All you have to do is tell R to use the vecLib BLAS rather than the reference one.\n\nTo do so, open Terminal and run:\n\n-   `cd /Library/Frameworks/R.framework/Resources/lib`\n\nfollowed by:\n\n-   `ln -sf libRblas.vecLib.dylib libRblas.dylib`\n\nOn an Intel Mac, this will result in optimized math functions using all available CPU cores. On M-series processors, it [looks like](https://stackoverflow.com/questions/67587455/accelerate-framework-uses-only-one-core-on-mac-m1) this behaves a bit differently, as optimized math routines are instead handled by the specialized AMX co-processor, so you will not see full CPU utilization.\n\n#### Issues and Reversion\n\nI have not run into any compatibility issues using R with Apple's Accelerate framework. To revert the changes, run the following two commands in Terminal to point R back to the original reference BLAS:\n\n-   `cd /Library/Frameworks/R.framework/Resources/lib`\n-   `ln -sf libRblas.0.dylib libRblas.dylib`\n\n### Checking that it works\n\nA simple check to ensure R is using the optimized libraries is to run the following code from this [answer](https://stackoverflow.com/a/42854705) on stackoverflow.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nm <- 10000\nn <- 2000\nA <- matrix (runif (m*n),m,n)\nsystem.time (S <- svd (A,nu=0,nv=0))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   user  system elapsed \n  2.425   0.243   1.860 \n```\n:::\n:::\n\n\nOn my PC with an 18-core Intel Xeon processor, this takes about *40 seconds* without using the MKL. After linking the libraries, the computation time drops to just over *3 seconds*! My MacBook Pro with an M2 processor is even faster at about 2 seconds. In effect, this drops my modelling time for some large spatial econometric models from hours to minutes.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}